}
}
graph <- data.frame(nodes, targets)
graph <- graph[1:100, ]
install.packages('visNetwork')
library(visNetwork)
library(visNetwork)
graph
library(reshape2)
library(ggplot2)
makePrior <- function(m,n){
a = n * m
b = n * (1 - m)
dom <- seq(0,1,0.001)
val <- dbeta(dom,a,b)
return(data.frame('x'=dom, 'y'=val))
}
makeLikelihood <- function(N,Y){
a <- Y + 1
b <- N - Y + 1
dom <- seq(0,1,0.001)
val <- dbeta(dom,a,b)
return(data.frame('x'=dom, 'y'=val))
}
makePosterior <- function(m, n, N, Y, name){
a <- Y + (n*m) -1
b <- N - Y + (n*(1-m)) - 1
dom <- seq(0,1,0.001)
val <- dbeta(dom,a,b)
return(data.frame('x'=dom, 'name' = name, 'y'=val))
}
mean_of_posterior <- function(m,n,N,Y){
a <- Y + (n*m) -1
b <- N - Y + (n*(1-m)) - 1
E_posterior <- a / (a + b)
return(E_posterior)
}
NObs <- 150
theta_true <- 0.75
successes <- rbinom(NObs, 1, theta_true)
obs <- data.frame(successes = successes, trials = rep(1, NObs))
mode_of_posterior <- function(m,n,N,Y){
a <- Y + (n*m) -1
b <- N - Y + (n*(1-m)) - 1
mode_posterior <- (a-1)/(a+b-2)
return(mode_posterior)
}
assimilate <- function(m, n,  obs){
output <- data.frame(x = c(), iter=c(), value=c())
ctx <- 1
for (ctx in 1:nrow(obs)){
thisObs <- obs[ctx,]
numTrials <- thisObs$trials
numSuccess <- thisObs$successes
thisIter <- paste("POSTERIOR", ctx, sep="_")
thisPost <- makePosterior(m, n, numSuccesses, numTrials, thisIter)
me <- mode_of_posterior(m, n, numSuccesses, numTrials)
m <- me
print(c(m, n, numTrials, numSuccess))
output <- rbind(output, thisPost)
n = n + 1
}
return(output)
}
assim_dist <- assimilate(0.5, 150, obs)
ggplot(aes(x = x), data=assim_dist) + geom_line(aes(y = y, group=name, col=name)) + scale_color_discrete(guide=F)
library(reshape2)
library(ggplot2)
makePrior <- function(m,n){
a = n * m
b = n * (1 - m)
dom <- seq(0,1,0.001)
val <- dbeta(dom,a,b)
return(data.frame('x'=dom, 'y'=val))
}
makeLikelihood <- function(N,Y){
a <- Y + 1
b <- N - Y + 1
dom <- seq(0,1,0.001)
val <- dbeta(dom,a,b)
return(data.frame('x'=dom, 'y'=val))
}
makePosterior <- function(m, n, N, Y, name){
a <- Y + (n*m) -1
b <- N - Y + (n*(1-m)) - 1
dom <- seq(0,1,0.001)
val <- dbeta(dom,a,b)
return(data.frame('x'=dom, 'name' = name, 'y'=val))
}
mean_of_posterior <- function(m,n,N,Y){
a <- Y + (n*m) -1
b <- N - Y + (n*(1-m)) - 1
E_posterior <- a / (a + b)
return(E_posterior)
}
NObs <- 150
theta_true <- 0.75
successes <- rbinom(NObs, 1, theta_true)
obs <- data.frame(successes = successes, trials = rep(1, NObs))
mode_of_posterior <- function(m,n,N,Y){
a <- Y + (n*m) -1
b <- N - Y + (n*(1-m)) - 1
mode_posterior <- (a-1)/(a+b-2)
return(mode_posterior)
}
assimilate <- function(m, n,  obs){
output <- data.frame(x = c(), iter=c(), value=c())
ctx <- 1
for (ctx in 1:nrow(obs)){
thisObs <- obs[ctx,]
numTrials <- thisObs$trials
numSuccess <- thisObs$successes
thisIter <- paste("POSTERIOR", ctx, sep="_")
thisPost <- makePosterior(m, n, numSuccess, numTrials, thisIter)
me <- mode_of_posterior(m, n, numSuccess, numTrials)
m <- me
print(c(m, n, numTrials, numSuccess))
output <- rbind(output, thisPost)
n = n + 1
}
return(output)
}
assim_dist <- assimilate(0.5, 150, obs)
ggplot(aes(x = x), data=assim_dist) + geom_line(aes(y = y, group=name, col=name)) + scale_color_discrete(guide=F)
library(reshape2)
library(ggplot2)
makePrior <- function(m,n){
a = n * m
b = n * (1 - m)
dom <- seq(0,1,0.001)
val <- dbeta(dom,a,b)
return(data.frame('x'=dom, 'y'=val))
}
makeLikelihood <- function(N,Y){
a <- Y + 1
b <- N - Y + 1
dom <- seq(0,1,0.001)
val <- dbeta(dom,a,b)
return(data.frame('x'=dom, 'y'=val))
}
makePosterior <- function(m, n, N, Y, name){
a <- Y + (n*m) -1
b <- N - Y + (n*(1-m)) - 1
dom <- seq(0,1,0.001)
val <- dbeta(dom,a,b)
return(data.frame('x'=dom, 'name' = name, 'y'=val))
}
mean_of_posterior <- function(m,n,N,Y){
a <- Y + (n*m) -1
b <- N - Y + (n*(1-m)) - 1
E_posterior <- a / (a + b)
return(E_posterior)
}
NObs <- 150
theta_true <- 0.5
successes <- rbinom(NObs, 1, theta_true)
obs <- data.frame(successes = successes, trials = rep(1, NObs))
mode_of_posterior <- function(m,n,N,Y){
a <- Y + (n*m) -1
b <- N - Y + (n*(1-m)) - 1
mode_posterior <- (a-1)/(a+b-2)
return(mode_posterior)
}
assimilate <- function(m, n,  obs){
output <- data.frame(x = c(), iter=c(), value=c())
ctx <- 1
for (ctx in 1:nrow(obs)){
thisObs <- obs[ctx,]
numTrials <- thisObs$trials
numSuccess <- thisObs$successes
thisIter <- paste("POSTERIOR", ctx, sep="_")
thisPost <- makePosterior(m, n, numSuccess, numTrials, thisIter)
me <- mode_of_posterior(m, n, numSuccess, numTrials)
m <- me
print(c(m, n, numTrials, numSuccess))
output <- rbind(output, thisPost)
n = n + 1
}
return(output)
}
assim_dist <- assimilate(0.5, 150, obs)
obs
library(reshape2)
library(ggplot2)
makePrior <- function(m,n){
a = n * m
b = n * (1 - m)
dom <- seq(0,1,0.001)
val <- dbeta(dom,a,b)
return(data.frame('x'=dom, 'y'=val))
}
makeLikelihood <- function(N,Y){
a <- Y + 1
b <- N - Y + 1
dom <- seq(0,1,0.001)
val <- dbeta(dom,a,b)
return(data.frame('x'=dom, 'y'=val))
}
makePosterior <- function(m, n, N, Y, name){
a <- Y + (n*m) -1
b <- N - Y + (n*(1-m)) - 1
dom <- seq(0,1,0.001)
val <- dbeta(dom,a,b)
return(data.frame('x'=dom, 'name' = name, 'y'=val))
}
mean_of_posterior <- function(m,n,N,Y){
a <- Y + (n*m) -1
b <- N - Y + (n*(1-m)) - 1
E_posterior <- a / (a + b)
return(E_posterior)
}
NObs <- 1
theta_true <- 0.5
successes <- rbinom(NObs, 1, theta_true)
obs <- data.frame(successes = successes, trials = rep(1, NObs))
mode_of_posterior <- function(m,n,N,Y){
a <- Y + (n*m) -1
b <- N - Y + (n*(1-m)) - 1
mode_posterior <- (a-1)/(a+b-2)
return(mode_posterior)
}
assimilate <- function(m, n,  obs){
output <- data.frame(x = c(), iter=c(), value=c())
ctx <- 1
for (ctx in 1:nrow(obs)){
thisObs <- obs[ctx,]
numTrials <- thisObs$trials
numSuccess <- thisObs$successes
thisIter <- paste("POSTERIOR", ctx, sep="_")
thisPost <- makePosterior(m, n, numSuccess, numTrials, thisIter)
me <- mode_of_posterior(m, n, numSuccess, numTrials)
m <- me
print(c(m, n, numTrials, numSuccess))
output <- rbind(output, thisPost)
n = n + 1
}
return(output)
}
assim_dist <- assimilate(0.5, 150, obs)
ggplot(aes(x = x), data=assim_dist) + geom_line(aes(y = y, group=name, col=name)) + scale_color_discrete(guide=F)
library(reshape2)
library(ggplot2)
makePrior <- function(m,n){
a = n * m
b = n * (1 - m)
dom <- seq(0,1,0.001)
val <- dbeta(dom,a,b)
return(data.frame('x'=dom, 'y'=val))
}
makeLikelihood <- function(N,Y){
a <- Y + 1
b <- N - Y + 1
dom <- seq(0,1,0.001)
val <- dbeta(dom,a,b)
return(data.frame('x'=dom, 'y'=val))
}
makePosterior <- function(m, n, N, Y, name){
a <- Y + (n*m) -1
b <- N - Y + (n*(1-m)) - 1
dom <- seq(0,1,0.001)
val <- dbeta(dom,a,b)
return(data.frame('x'=dom, 'name' = name, 'y'=val))
}
mean_of_posterior <- function(m,n,N,Y){
a <- Y + (n*m) -1
b <- N - Y + (n*(1-m)) - 1
E_posterior <- a / (a + b)
return(E_posterior)
}
NObs <- 10
theta_true <- 0.5
successes <- rbinom(NObs, 1, theta_true)
obs <- data.frame(successes = successes, trials = rep(1, NObs))
mode_of_posterior <- function(m,n,N,Y){
a <- Y + (n*m) -1
b <- N - Y + (n*(1-m)) - 1
mode_posterior <- (a-1)/(a+b-2)
return(mode_posterior)
}
assimilate <- function(m, n,  obs){
output <- data.frame(x = c(), iter=c(), value=c())
ctx <- 1
for (ctx in 1:nrow(obs)){
thisObs <- obs[ctx,]
numTrials <- thisObs$trials
numSuccess <- thisObs$successes
thisIter <- paste("POSTERIOR", ctx, sep="_")
thisPost <- makePosterior(m, n, numSuccess, numTrials, thisIter)
me <- mean_of_posterior(m, n, numSuccess, numTrials)
m <- me
print(c(m, n, numTrials, numSuccess))
output <- rbind(output, thisPost)
n = n + 1
}
return(output)
}
assim_dist <- assimilate(0.5, 150, obs)
ggplot(aes(x = x), data=assim_dist) + geom_line(aes(y = y, group=name, col=name)) + scale_color_discrete(guide=F)
library(reshape2)
library(ggplot2)
makePrior <- function(m,n){
a = n * m
b = n * (1 - m)
dom <- seq(0,1,0.001)
val <- dbeta(dom,a,b)
return(data.frame('x'=dom, 'y'=val))
}
makeLikelihood <- function(N,Y){
a <- Y + 1
b <- N - Y + 1
dom <- seq(0,1,0.001)
val <- dbeta(dom,a,b)
return(data.frame('x'=dom, 'y'=val))
}
makePosterior <- function(m, n, N, Y, name){
a <- Y + (n*m) -1
b <- N - Y + (n*(1-m)) - 1
dom <- seq(0,1,0.001)
val <- dbeta(dom,a,b)
return(data.frame('x'=dom, 'name' = name, 'y'=val))
}
mean_of_posterior <- function(m,n,N,Y){
a <- Y + (n*m) -1
b <- N - Y + (n*(1-m)) - 1
E_posterior <- a / (a + b)
return(E_posterior)
}
NObs <- 10
theta_true <- 0.5
successes <- rbinom(NObs, 1, theta_true)
obs <- data.frame(successes = successes, trials = rep(1, NObs))
mode_of_posterior <- function(m,n,N,Y){
a <- Y + (n*m) -1
b <- N - Y + (n*(1-m)) - 1
mode_posterior <- (a-1)/(a+b-2)
return(mode_posterior)
}
assimilate <- function(m, n,  obs){
output <- data.frame(x = c(), iter=c(), value=c())
ctx <- 1
for (ctx in 1:nrow(obs)){
thisObs <- obs[ctx,]
numTrials <- thisObs$trials
numSuccess <- thisObs$successes
thisIter <- paste("POSTERIOR", ctx, sep="_")
thisPost <- makePosterior(m, n, numSuccess, numTrials, thisIter)
me <- mean_of_posterior(m, n, numSuccess, numTrials)
m <- me
print(c(m, n, numTrials, numSuccess))
output <- rbind(output, thisPost)
n = n + 1
}
return(output)
}
assim_dist <- assimilate(0.5, 10, obs)
ggplot(aes(x = x), data=assim_dist) + geom_line(aes(y = y, group=name, col=name)) + scale_color_discrete(guide=F)
a
s
v
rm(list=ls())
a
v
?silhoutte
??silhoutte
doInstall = F
if(doInstall){
install.packages(c('FactoMineR', 'fclust', 'arules', 'arulesViz', 'ggfortify', 'factoextra', 'vegan', 'plyr', 'ggplot2', 'cluster', 'knitr', 'reshape2', 'plyr'))
}
library(FactoMineR)
library(fclust)
library(arules)
library(arulesViz)
library(cluster)
library(vegan)
library (plyr)
library(ggplot2)
library(ggfortify)
library(factoextra)
library(knitr)
library(reshape2)
library(plyr)
setwd("/users/scottsfarley/documents/geog970_eval/code/R")
source("./input.data.R")
N = 50
novice.dat <- generateTheoreticalData.simple(N, "Novice", "./../../models/novice.model.csv")
p <- sum(research.dat$infoPanel) / length(research.dat$infoPanel)
nu <- N
a <- p * nu
b <- nu*(1-p)
successes <- 50
trials <- 100
real.success <- sum(real.dat$infoPanel)
real.trials <- length(real.dat$infoPanel)
# real.p <- sum(real.dat$infoPanel) / length(real.dat$infoPanel)
# real.nu <- length(real.dat$infoPanel)
# #
# real.a <- real.p * real.nu
# real.b <- real.nu*(1-real.p)
post <- calcPosteriorForProportion(real.success, real.trials, a, b)
newA <- 122
newB <- 28
newSuccess <- 50
newTrials <- 60
post <- calcPosteriorForProportion(newSuccess, newTrials, newA, newB)
calcPosteriorForProportion <- function(successes, total, a, b)
{
# Adapted from triplot() in the LearnBayes package
# Plot the prior, likelihood and posterior:
likelihood_a = successes + 1; likelihood_b = total - successes + 1
posterior_a = a + successes;  posterior_b = b + total - successes
theta = seq(0.005, 0.995, length = 500)
prior = dbeta(theta, a, b)
likelihood = dbeta(theta, likelihood_a, likelihood_b)
posterior  = dbeta(theta, posterior_a, posterior_b)
m = max(c(prior, likelihood, posterior))
plot(theta, posterior, type = "l", ylab = "Density", lty = 2, lwd = 3,
main = paste("beta(", a, ",", b, ") prior, B(", total, ",", successes, ") data,",
"beta(", posterior_a, ",", posterior_b, ") posterior"), ylim = c(0, m), col = "red")
lines(theta, likelihood, lty = 1, lwd = 3, col = "blue")
lines(theta, prior, lty = 3, lwd = 3, col = "green")
legend(x=0.8,y=m, c("Prior", "Likelihood", "Posterior"), lty = c(3, 1, 2),
lwd = c(3, 3, 3), col = c("green", "blue", "red"))
# Print out summary statistics for the prior, likelihood and posterior:
calcBetaMode <- function(aa, bb) { BetaMode <- (aa - 1)/(aa + bb - 2); return(BetaMode); }
calcBetaMean <- function(aa, bb) { BetaMean <- (aa)/(aa + bb); return(BetaMean); }
calcBetaSd   <- function(aa, bb) { BetaSd <- sqrt((aa * bb)/(((aa + bb)^2) * (aa + bb + 1))); return(BetaSd); }
prior_mode      <- calcBetaMode(a, b)
likelihood_mode <- calcBetaMode(likelihood_a, likelihood_b)
posterior_mode  <- calcBetaMode(posterior_a, posterior_b)
prior_mean      <- calcBetaMean(a, b)
likelihood_mean <- calcBetaMean(likelihood_a, likelihood_b)
posterior_mean  <- calcBetaMean(posterior_a, posterior_b)
prior_sd        <- calcBetaSd(a, b)
likelihood_sd   <- calcBetaSd(likelihood_a, likelihood_b)
posterior_sd    <- calcBetaSd(posterior_a, posterior_b)
print(paste("mode for prior=",prior_mode,", for likelihood=",likelihood_mode,", for posterior=",posterior_mode))
print(paste("mean for prior=",prior_mean,", for likelihood=",likelihood_mean,", for posterior=",posterior_mean))
print(paste("sd for prior=",prior_sd,", for likelihood=",likelihood_sd,", for posterior=",posterior_sd))
print(paste("Posterior A: ", posterior_a))
print(paste("Posterior B: ", posterior_b))
return(posterior)
}
N = 50
novice.dat <- generateTheoreticalData.simple(N, "Novice", "./../../models/novice.model.csv")
p <- sum(research.dat$infoPanel) / length(research.dat$infoPanel)
nu <- N
a <- p * nu
b <- nu*(1-p)
successes <- 50
trials <- 100
real.success <- sum(real.dat$infoPanel)
real.trials <- length(real.dat$infoPanel)
# real.p <- sum(real.dat$infoPanel) / length(real.dat$infoPanel)
# real.nu <- length(real.dat$infoPanel)
# #
# real.a <- real.p * real.nu
# real.b <- real.nu*(1-real.p)
post <- calcPosteriorForProportion(real.success, real.trials, a, b)
newA <- 122
newB <- 28
newSuccess <- 50
newTrials <- 60
post <- calcPosteriorForProportion(newSuccess, newTrials, newA, newB)
N = 50
novice.dat <- generateTheoreticalData.simple(N, "Novice", "./../../models/novice.model.csv")
p <- sum(research.dat$infoPanel) / length(research.dat$infoPanel)
p <- sum(novice.dat$infoPanel) / length(novice.dat$infoPanel)
nu <- N
a <- p * nu
b <- nu*(1-p)
successes <- 50
trials <- 100
real.success <- sum(real.dat$infoPanel)
real.dat <- generateTheoreticalData.simple(100, "Real", "./../../models/real.model.csv")
real.all <- rbind(all, real.dat)
all <- rbind(student.dat, research.dat)
ggplot(all) + geom_density(aes(x = infoPanelWidth, color=class, group=class, fill=class)) + ggtitle("Generated Distribution of Panel Widths") + xlab("Panel width (%)") + ylab("Density") + scale_x_continuous(limits = c(0, 100))
source("./input.data.R")
N = 500
student.dat <- generateTheoreticalData.simple(N, "Novice", "./../../models/novice.model.csv")
research.dat <- generateTheoreticalData.simple(N, "Research", "./../../models/expert.model.csv")
kable(head(student.dat[1:2]))
all <- rbind(student.dat, research.dat)
ggplot(all) + geom_bar(aes(x = infoPanel, color=class, group=class, fill=class), position='dodge') + ggtitle("Generated Distribution of Panel Use") + xlab("Use of info panel during session") + ylab("Frequency")
real.dat <- generateTheoreticalData.simple(100, "Real", "./../../models/real.model.csv")
real.all <- rbind(all, real.dat)
ggplot(real.all) + geom_bar(aes(x = infoPanel, color=class, group=class, fill=class), position='dodge') + ggtitle("Generated Distribution of Panel Use") + xlab("Use of info panel during session") + ylab("Frequency")
ggplot(real.all) + geom_density(aes(x = infoPanelWidth, color=class, group=class, fill=class)) + ggtitle("Generated Distribution of Panel Widths") + xlab("Panel width (%)") + ylab("Density") + scale_x_continuous(limits = c(0, 100))
dat.noclass <- real.all[, -3]
k = 3
clusters <- fanny(dat.noclass, k, memb.exp = 3)
N = 50
novice.dat <- generateTheoreticalData.simple(N, "Novice", "./../../models/novice.model.csv")
p <- sum(novice.dat$infoPanel) / length(novice.dat$infoPanel)
nu <- N
a <- p * nu
b <- nu*(1-p)
successes <- 50
trials <- 100
real.success <- sum(real.dat$infoPanel)
real.trials <- length(real.dat$infoPanel)
# real.p <- sum(real.dat$infoPanel) / length(real.dat$infoPanel)
# real.nu <- length(real.dat$infoPanel)
# #
# real.a <- real.p * real.nu
# real.b <- real.nu*(1-real.p)
post <- calcPosteriorForProportion(real.success, real.trials, a, b)
newA <- 122
newB <- 28
newSuccess <- 50
newTrials <- 60
post <- calcPosteriorForProportion(newSuccess, newTrials, newA, newB)
