abs(priorC_q2-quantile2_q) +
abs(priorC_q3-quantile3_q)
if (priorC_error < max_error)
{
max_error <- priorC_error; best_a <- a; best_b <- b
}
}
}
print(paste("The best beta prior has a=",best_a,"b=",best_b))
return(list(a=best_a, b=best_b))
}
quantile1 <- list(p=0.5, x=0.85)    # we believe the median of the prior is 0.85
quantile2 <- list(p=0.75,x=0.95) # we believe the 99.999th percentile of the prior is 0.95
quantile3 <- list(p=0.25,x=0.60) # we believe the 0.001st percentile of the prior is 0.60
# findBeta(quantile1,quantile2,quantile3)
calcPosteriorForProportion <- function(successes, total, a, b)
{
# Adapted from triplot() in the LearnBayes package
# Plot the prior, likelihood and posterior:
likelihood_a = successes + 1; likelihood_b = total - successes + 1
posterior_a = a + successes;  posterior_b = b + total - successes
theta = seq(0.005, 0.995, length = 500)
prior = dbeta(theta, a, b)
likelihood = dbeta(theta, likelihood_a, likelihood_b)
posterior  = dbeta(theta, posterior_a, posterior_b)
m = max(c(prior, likelihood, posterior))
plot(theta, posterior, type = "l", ylab = "Density", lty = 2, lwd = 3,
main = paste("beta(", a, ",", b, ") prior, B(", total, ",", successes, ") data,",
"beta(", posterior_a, ",", posterior_b, ") posterior"), ylim = c(0, m), col = "red")
lines(theta, likelihood, lty = 1, lwd = 3, col = "blue")
lines(theta, prior, lty = 3, lwd = 3, col = "green")
legend(x=0.8,y=m, c("Prior", "Likelihood", "Posterior"), lty = c(3, 1, 2),
lwd = c(3, 3, 3), col = c("green", "blue", "red"))
# Print out summary statistics for the prior, likelihood and posterior:
calcBetaMode <- function(aa, bb) { BetaMode <- (aa - 1)/(aa + bb - 2); return(BetaMode); }
calcBetaMean <- function(aa, bb) { BetaMean <- (aa)/(aa + bb); return(BetaMean); }
calcBetaSd   <- function(aa, bb) { BetaSd <- sqrt((aa * bb)/(((aa + bb)^2) * (aa + bb + 1))); return(BetaSd); }
prior_mode      <- calcBetaMode(a, b)
likelihood_mode <- calcBetaMode(likelihood_a, likelihood_b)
posterior_mode  <- calcBetaMode(posterior_a, posterior_b)
prior_mean      <- calcBetaMean(a, b)
likelihood_mean <- calcBetaMean(likelihood_a, likelihood_b)
posterior_mean  <- calcBetaMean(posterior_a, posterior_b)
prior_sd        <- calcBetaSd(a, b)
likelihood_sd   <- calcBetaSd(likelihood_a, likelihood_b)
posterior_sd    <- calcBetaSd(posterior_a, posterior_b)
print(paste("mode for prior=",prior_mode,", for likelihood=",likelihood_mode,", for posterior=",posterior_mode))
print(paste("mean for prior=",prior_mean,", for likelihood=",likelihood_mean,", for posterior=",posterior_mean))
print(paste("sd for prior=",prior_sd,", for likelihood=",likelihood_sd,", for posterior=",posterior_sd))
return(posterior)
}
p <- calcPosteriorForProportion(45, 50, 52.22, 9.52)
makeQuantiles <- function(dist, quantiles=c(0.25, 0.5, 0.75)){
x1 <- quantile(dist, quantiles[1])[[1]]
q1 <- list(p=quantiles[[1]], x=x1)
x2 <- quantile(dist, quantiles[2])[[1]]
q2 <- list(p=quantiles[[2]], x=x2)
x3 <- quantile(dist, quantiles[3])[[1]]
q3 <- list(p=quantiles[[3]], x=x3)
return(list(q1, q2, q3))
}
# q <- makeQuantiles(p)
# d <- findBeta(q[[1]], q[[2]], q[[3]])
p <- calcPosteriorForProportion(1, 10, 0.5, 0.5)
x <- beta.select(list(p=0.0001, x=quantile(p, 0.0001)), list(p=0.75, x=quantile(p, 0.75)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
x <- beta.select(list(p=0.0001, x=quantile(p, 0.0001)), list(p=0.75, x=quantile(p, 0.75)))
p <- calcPosteriorForProportion(1, 10, d[[1]], d[[2]])
x <- beta.select(list(p=0.0001, x=quantile(p, 0.0001)), list(p=0.75, x=quantile(p, 0.75)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
x <- beta.select(list(p=0.0001, x=quantile(p, 0.0001)), list(p=0.75, x=quantile(p, 0.75)))
p <- calcPosteriorForProportion(1, 10, d[[1]], d[[2]])
x <- beta.select(list(p=0.0001, x=quantile(p, 0.0001)), list(p=0.75, x=quantile(p, 0.75)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
x <- beta.select(list(p=0.0001, x=quantile(p, 0.0001)), list(p=0.75, x=quantile(p, 0.75)))
p <- calcPosteriorForProportion(1, 10, d[[1]], d[[2]])
x <- beta.select(list(p=0.0001, x=quantile(p, 0.0001)), list(p=0.75, x=quantile(p, 0.75)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
x <- beta.select(list(p=0.0001, x=quantile(p, 0.0001)), list(p=0.75, x=quantile(p, 0.75)))
p <- calcPosteriorForProportion(1, 10, d[[1]], d[[2]])
p <- calcPosteriorForProportion(1, 10, 10, 10)
x <- beta.select(list(p=0.001, x=quantile(p, 0.001)), list(p=0.75, x=quantile(p, 0.75)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
x <- beta.select(list(p=0.001, x=quantile(p, 0.001)), list(p=0.75, x=quantile(p, 0.75)))
p <- calcPosteriorForProportion(1, 10, 10, 10)
x <- beta.select(list(p=0.001, x=quantile(p, 0.001)), list(p=0.75, x=quantile(p, 0.75)))
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, 10, 10)
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, d[[1]], d[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
library(LearnBayes)
findBeta <- function(quantile1,quantile2,quantile3)
{
# find the quantiles specified by quantile1 and quantile2 and quantile3
quantile1_p <- quantile1[[1]]; quantile1_q <- quantile1[[2]]
quantile2_p <- quantile2[[1]]; quantile2_q <- quantile2[[2]]
quantile3_p <- quantile3[[1]]; quantile3_q <- quantile3[[2]]
# find the beta prior using quantile1 and quantile2
priorA <- beta.select(quantile1,quantile2)
priorA_a <- priorA[1]; priorA_b <- priorA[2]
# find the beta prior using quantile1 and quantile3
priorB <- beta.select(quantile1,quantile3)
priorB_a <- priorB[1]; priorB_b <- priorB[2]
# find the best possible beta prior
diff_a <- abs(priorA_a - priorB_a); diff_b <- abs(priorB_b - priorB_b)
step_a <- diff_a / 100; step_b <- diff_b / 100
if (priorA_a < priorB_a) { start_a <- priorA_a; end_a <- priorB_a }
else                     { start_a <- priorB_a; end_a <- priorA_a }
if (priorA_b < priorB_b) { start_b <- priorA_b; end_b <- priorB_b }
else                     { start_b <- priorB_b; end_b <- priorA_b }
steps_a <- seq(from=start_a, to=end_a, length.out=1000)
steps_b <- seq(from=start_b, to=end_b, length.out=1000)
max_error <- 10000000000000000000
best_a <- 0; best_b <- 0
for (a in steps_a)
{
for (b in steps_b)
{
# priorC is beta(a,b)
# find the quantile1_q, quantile2_q, quantile3_q quantiles of priorC:
priorC_q1 <- qbeta(c(quantile1_p), a, b)
priorC_q2 <- qbeta(c(quantile2_p), a, b)
priorC_q3 <- qbeta(c(quantile3_p), a, b)
priorC_error <- abs(priorC_q1-quantile1_q) +
abs(priorC_q2-quantile2_q) +
abs(priorC_q3-quantile3_q)
if (priorC_error < max_error)
{
max_error <- priorC_error; best_a <- a; best_b <- b
}
}
}
print(paste("The best beta prior has a=",best_a,"b=",best_b))
return(list(a=best_a, b=best_b))
}
quantile1 <- list(p=0.5, x=0.85)    # we believe the median of the prior is 0.85
quantile2 <- list(p=0.75,x=0.95) # we believe the 99.999th percentile of the prior is 0.95
quantile3 <- list(p=0.25,x=0.60) # we believe the 0.001st percentile of the prior is 0.60
# findBeta(quantile1,quantile2,quantile3)
calcPosteriorForProportion <- function(successes, total, a, b)
{
# Adapted from triplot() in the LearnBayes package
# Plot the prior, likelihood and posterior:
likelihood_a = successes + 1; likelihood_b = total - successes + 1
posterior_a = a + successes;  posterior_b = b + total - successes
theta = seq(0.005, 0.995, length = 500)
prior = dbeta(theta, a, b)
likelihood = dbeta(theta, likelihood_a, likelihood_b)
posterior  = dbeta(theta, posterior_a, posterior_b)
m = max(c(prior, likelihood, posterior))
plot(theta, posterior, type = "l", ylab = "Density", lty = 2, lwd = 3,
main = paste("beta(", a, ",", b, ") prior, B(", total, ",", successes, ") data,",
"beta(", posterior_a, ",", posterior_b, ") posterior"), ylim = c(0, m), col = "red")
lines(theta, likelihood, lty = 1, lwd = 3, col = "blue")
lines(theta, prior, lty = 3, lwd = 3, col = "green")
legend(x=0.8,y=m, c("Prior", "Likelihood", "Posterior"), lty = c(3, 1, 2),
lwd = c(3, 3, 3), col = c("green", "blue", "red"))
# Print out summary statistics for the prior, likelihood and posterior:
calcBetaMode <- function(aa, bb) { BetaMode <- (aa - 1)/(aa + bb - 2); return(BetaMode); }
calcBetaMean <- function(aa, bb) { BetaMean <- (aa)/(aa + bb); return(BetaMean); }
calcBetaSd   <- function(aa, bb) { BetaSd <- sqrt((aa * bb)/(((aa + bb)^2) * (aa + bb + 1))); return(BetaSd); }
prior_mode      <- calcBetaMode(a, b)
likelihood_mode <- calcBetaMode(likelihood_a, likelihood_b)
posterior_mode  <- calcBetaMode(posterior_a, posterior_b)
prior_mean      <- calcBetaMean(a, b)
likelihood_mean <- calcBetaMean(likelihood_a, likelihood_b)
posterior_mean  <- calcBetaMean(posterior_a, posterior_b)
prior_sd        <- calcBetaSd(a, b)
likelihood_sd   <- calcBetaSd(likelihood_a, likelihood_b)
posterior_sd    <- calcBetaSd(posterior_a, posterior_b)
print(paste("mode for prior=",prior_mode,", for likelihood=",likelihood_mode,", for posterior=",posterior_mode))
print(paste("mean for prior=",prior_mean,", for likelihood=",likelihood_mean,", for posterior=",posterior_mean))
print(paste("sd for prior=",prior_sd,", for likelihood=",likelihood_sd,", for posterior=",posterior_sd))
return(posterior)
}
p <- calcPosteriorForProportion(45, 50, 52.22, 9.52)
makeQuantiles <- function(dist, quantiles=c(0.25, 0.5, 0.75)){
x1 <- quantile(dist, quantiles[1])[[1]]
q1 <- list(p=quantiles[[1]], x=x1)
x2 <- quantile(dist, quantiles[2])[[1]]
q2 <- list(p=quantiles[[2]], x=x2)
x3 <- quantile(dist, quantiles[3])[[1]]
q3 <- list(p=quantiles[[3]], x=x3)
return(list(q1, q2, q3))
}
# q <- makeQuantiles(p)
# d <- findBeta(q[[1]], q[[2]], q[[3]])
p <- calcPosteriorForProportion(1, 10, 10, 10)
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, d[[1]], d[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, d[[1]], d[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, d[[1]], d[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, d[[1]], d[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, d[[1]], d[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, d[[1]], d[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, d[[1]], d[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, d[[1]], d[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, d[[1]], d[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, d[[1]], d[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, d[[1]], d[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, d[[1]], d[[2]])
library(rjags)
n      <- 20
Y      <- 4
a      <- 3
b      <- 1
model_string <- "model{
# Likelihood
Y ~ dbinom(theta,n)
# Prior
theta ~ dbeta(a, b)
}"
model <- jags.model(textConnection(model_string),
data = list(Y=Y,n=n,a=a,b=b))
update(model, 10000, progress.bar="none"); # Burnin for 10000 samples
samp <- coda.samples(model,
variable.names=c("theta"),
n.iter=20000, progress.bar="none")
summary(samp)
library(rjags)
n      <- 1
Y      <- 0
a      <- 3
b      <- 1
model_string <- "model{
# Likelihood
Y ~ dbinom(theta,n)
# Prior
theta ~ dbeta(a, b)
}"
model <- jags.model(textConnection(model_string),
data = list(Y=Y,n=n,a=a,b=b))
update(model, 10000, progress.bar="none"); # Burnin for 10000 samples
samp <- coda.samples(model,
variable.names=c("theta"),
n.iter=20000, progress.bar="none")
summary(samp)
plor(sample)
plot(samp)
library(rjags)
n      <- 1
Y      <- 0
a      <- 1
b      <- 1
model_string <- "model{
# Likelihood
Y ~ dbinom(theta,n)
# Prior
theta ~ dbeta(a, b)
}"
model <- jags.model(textConnection(model_string),
data = list(Y=Y,n=n,a=a,b=b))
update(model, 10000, progress.bar="none"); # Burnin for 10000 samples
samp <- coda.samples(model,
variable.names=c("theta"),
n.iter=20000, progress.bar="none")
summary(samp)
plot(density(samp))
library(rjags)
n      <- 1
Y      <- 0
a      <- 1
b      <- 1
model_string <- "model{
# Likelihood
Y ~ dbinom(theta,n)
# Prior
theta ~ dbeta(a, b)
}"
model <- jags.model(textConnection(model_string),
data = list(Y=Y,n=n,a=a,b=b))
update(model, 10000, progress.bar="none"); # Burnin for 10000 samples
samp <- coda.samples(model,
variable.names=c("theta"),
n.iter=20000, progress.bar="none")
summary(samp)
plot(samp)
library(rjags)
n      <- 1
Y      <- 0
a      <- 1
b      <- 1
model_string <- "model{
# Likelihood
Y ~ dbinom(theta,n)
# Prior
theta ~ dbeta(a, b)
}"
model <- jags.model(textConnection(model_string),
data = list(Y=Y,n=n,a=a,b=b))
update(model, 10000, progress.bar="none"); # Burnin for 10000 samples
samp <- coda.samples(model,
variable.names=c("theta"),
n.iter=20000, progress.bar="none")
summary(samp)
plot(samp)
?update
samp
quantile(samp)
q <- as.mcmc(samp)
q
plot(q)
as.numeric(q)
q <- as.numeric(q)
quantile(q)
density(q)
plot(density(q))
beta.select(q)
beta.select(list(x=0.25, p=quantile(q)[[2]]), list(x=0.75, p=quantile(q)[[4]]))
plot(rbeta(10000, 1.02, 0.52))
plot(density(rbeta(10000, 1.02, 0.52)))
lines(density(q))
plot(density(rbeta(10000, 0.52, 1.02)))
lines(density(q), col='red')
findBeta(list(x=0.25, p=quantile(q)[[2]]), list(x=0.75, p=quantile(q)[[4]]), list(x=0.5, p=quantile(q)[[3]]))
library(rjags)
n      <- 10
Y      <- 20
a      <- 1
b      <- 1
model_string <- "model{
# Likelihood
Y ~ dbinom(theta,n)
# Prior
theta ~ dbeta(a, b)
}"
model <- jags.model(textConnection(model_string),
data = list(Y=Y,n=n,a=a,b=b))
update(model, 10000, progress.bar="none"); # Burnin for 10000 samples
samp <- coda.samples(model,
variable.names=c("theta"),
n.iter=20000, progress.bar="none")
summary(samp)
plot(samp)
library(rjags)
n      <- 10
Y      <- 200000
a      <- 1
b      <- 1
model_string <- "model{
# Likelihood
Y ~ dbinom(theta,n)
# Prior
theta ~ dbeta(a, b)
}"
model <- jags.model(textConnection(model_string),
data = list(Y=Y,n=n,a=a,b=b))
update(model, 10000, progress.bar="none"); # Burnin for 10000 samples
samp <- coda.samples(model,
variable.names=c("theta"),
n.iter=20000, progress.bar="none")
summary(samp)
plot(samp)
plot(density(as.numeric(samp)))
plot(density(as.numeric(samp[1, ])))
plot(density(as.numeric(as.mcmc(samp))))
library(rjags)
n      <- 10
Y      <- 200000
a      <- 1
b      <- 10000
model_string <- "model{
# Likelihood
Y ~ dbinom(theta,n)
# Prior
theta ~ dbeta(a, b)
}"
model <- jags.model(textConnection(model_string),
data = list(Y=Y,n=n,a=a,b=b))
update(model, 10000, progress.bar="none"); # Burnin for 10000 samples
samp <- coda.samples(model,
variable.names=c("theta"),
n.iter=20000, progress.bar="none")
summary(samp)
plot(samp)
plot(density(as.numeric(as.mcmc(samp))))
library(rjags)
n      <- 1
Y      <- 2
a      <- 1
b      <- 1
model_string <- "model{
# Likelihood
Y ~ dbinom(theta,n)
# Prior
theta ~ dbeta(a, b)
}"
model <- jags.model(textConnection(model_string),
data = list(Y=Y,n=n,a=a,b=b))
update(model, 10000, progress.bar="none"); # Burnin for 10000 samples
samp <- coda.samples(model,
variable.names=c("theta"),
n.iter=20000, progress.bar="none")
summary(samp)
plot(samp)
library(rjags)
n      <- 1
Y      <- 2
a      <- 1
b      <- 2
model_string <- "model{
# Likelihood
Y ~ dbinom(theta,n)
# Prior
theta ~ dbeta(a, b)
}"
model <- jags.model(textConnection(model_string),
data = list(Y=Y,n=n,a=a,b=b))
update(model, 10000, progress.bar="none"); # Burnin for 10000 samples
samp <- coda.samples(model,
variable.names=c("theta"),
n.iter=20000, progress.bar="none")
summary(samp)
plot(samp)
q <- as.numeric(as.mcmc(samp))
library(rjags)
n      <- 1
Y      <- 2
a      <- 1
b      <- 2
model_string <- "model{
# Likelihood
Y ~ dbinom(theta,n)
# Prior
theta ~ dbeta(a, b)
}"
model <- jags.model(textConnection(model_string),
data = list(Y=Y,n=n,a=a,b=b))
update(model, 10000, progress.bar="none"); # Burnin for 10000 samples
samp <- coda.samples(model,
variable.names=c("theta"),
n.iter=20000, progress.bar="none")
summary(samp)
q <- as.numeric(as.mcmc(samp))
plot(density(q))
t1 <- findBeta(list(x=0.25, p=quantile(q)[[2]]), list(x=0.75, p=quantile(q)[[4]]), list(x=0.5, p=quantile(q)[[3]]))
lines(density(rbeta(10000, t1[[1]], t1[[2]])), col='green')
p <- calcPosteriorForProportion(y, n, a, b)
t2 <- findBeta(list(x=0.25, p=quantile(p)[[2]]), list(x=0.75, p=quantile(p)[[4]]), list(x=0.5, p=quantile(p)[[3]]))
lines(density(rbeta(10000, t2[[1]], t2[[2]])), col='red')
library(rjags)
n      <- 2
Y      <- 1
a      <- 1
b      <- 2
model_string <- "model{
# Likelihood
Y ~ dbinom(theta,n)
# Prior
theta ~ dbeta(a, b)
}"
model <- jags.model(textConnection(model_string),
data = list(Y=Y,n=n,a=a,b=b))
update(model, 10000, progress.bar="none"); # Burnin for 10000 samples
samp <- coda.samples(model,
variable.names=c("theta"),
n.iter=20000, progress.bar="none")
summary(samp)
q <- as.numeric(as.mcmc(samp))
plot(density(q))
t1 <- findBeta(list(x=0.25, p=quantile(q)[[2]]), list(x=0.75, p=quantile(q)[[4]]), list(x=0.5, p=quantile(q)[[3]]))
lines(density(rbeta(10000, t1[[1]], t1[[2]])), col='green')
p <- calcPosteriorForProportion(Y, n, a, b)
t2 <- findBeta(list(x=0.25, p=quantile(p)[[2]]), list(x=0.75, p=quantile(p)[[4]]), list(x=0.5, p=quantile(p)[[3]]))
lines(density(rbeta(10000, t2[[1]], t2[[2]])), col='red')
findBeta(list(x=0.25, p=quantile(q)[[2]]), list(x=0.75, p=quantile(q)[[4]]), list(x=0.5, p=quantile(q)[[3]]))
plot(density(q))
lines(density(rbeta(10000, t1[[1]], t1[[2]])), col='green')
t1
fromJson("/users/scottsfarley/documents/summitscraper/summitpost.json")
library(jsonlite)
fromJson("/users/scottsfarley/documents/summitscraper/summitpost.json")
fromJSON("/users/scottsfarley/documents/summitscraper/summitpost.json")
