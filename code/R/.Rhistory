N = 500
student.dat <- generateTheoreticalData.simple(N, "Novice", "./../../models/novice.model.csv")
research.dat <- generateTheoreticalData.simple(N, "Research", "./../../models/expert.model.csv")
kable(head(student.dat[1:2]))
all <- rbind(student.dat, research.dat)
ggplot(all) + geom_density(aes(x = infoPanelWidth, color=class, group=class, fill=class)) + ggtitle("Generated Distribution of Panel Widths") + xlab("Panel width (%)") + ylab("Density") + scale_x_continuous(limits = c(0, 100))
all <- rbind(student.dat, research.dat)
ggplot(all) + geom_bar(aes(x = infoPanel, color=class, group=class, fill=class), position='dodge') + ggtitle("Generated Distribution of Panel Use") + xlab("Use of info panel during session") + ylab("Frequency")
real.dat <- generateTheoreticalData.simple(N, "Research", "./../../models/real.model.csv")
real.dat <- generateTheoreticalData.simple(N, "Research", "./../../models/real.model.csv")
real.all <- rbind(all, real)
ggplot(real.all) + geom_bar(aes(x = infoPanel, color=class, group=class, fill=class), position='dodge') + ggtitle("Generated Distribution of Panel Use") + xlab("Use of info panel during session") + ylab("Frequency")
real.dat <- generateTheoreticalData.simple(N, "Research", "./../../models/real.model.csv")
real.all <- rbind(all, real.dat)
ggplot(real.all) + geom_bar(aes(x = infoPanel, color=class, group=class, fill=class), position='dodge') + ggtitle("Generated Distribution of Panel Use") + xlab("Use of info panel during session") + ylab("Frequency")
head(real.all)
summary(real.all)
tail(real.all)
head(real.dat)
real.dat <- generateTheoreticalData.simple(N, "Real", "./../../models/real.model.csv")
real.all <- rbind(all, real.dat)
ggplot(real.all) + geom_bar(aes(x = infoPanel, color=class, group=class, fill=class), position='dodge') + ggtitle("Generated Distribution of Panel Use") + xlab("Use of info panel during session") + ylab("Frequency")
real.dat <- generateTheoreticalData.simple(N, "Real", "./../../models/real.model.csv")
real.all <- rbind(all, real.dat)
ggplot(real.all) + geom_bar(aes(x = infoPanel, color=class, group=class, fill=class), position='dodge') + ggtitle("Generated Distribution of Panel Use") + xlab("Use of info panel during session") + ylab("Frequency")
real.dat <- generateTheoreticalData.simple(N, "Real", "./../../models/real.model.csv")
real.all <- rbind(all, real.dat)
ggplot(real.all) + geom_bar(aes(x = infoPanel, color=class, group=class, fill=class), position='dodge') + ggtitle("Generated Distribution of Panel Use") + xlab("Use of info panel during session") + ylab("Frequency")
ggplot(all) + geom_density(aes(x = infoPanelWidth, color=class, group=class, fill=class)) + ggtitle("Generated Distribution of Panel Widths") + xlab("Panel width (%)") + ylab("Density") + scale_x_continuous(limits = c(0, 100))
real.dat <- generateTheoreticalData.simple(N, "Real", "./../../models/real.model.csv")
real.all <- rbind(all, real.dat)
ggplot(real.all) + geom_bar(aes(x = infoPanel, color=class, group=class, fill=class), position='dodge') + ggtitle("Generated Distribution of Panel Use") + xlab("Use of info panel during session") + ylab("Frequency")
ggplot(real.all) + geom_density(aes(x = infoPanelWidth, color=class, group=class, fill=class)) + ggtitle("Generated Distribution of Panel Widths") + xlab("Panel width (%)") + ylab("Density") + scale_x_continuous(limits = c(0, 100))
real.dat <- generateTheoreticalData.simple(100, "Real", "./../../models/real.model.csv")
real.all <- rbind(all, real.dat)
ggplot(real.all) + geom_bar(aes(x = infoPanel, color=class, group=class, fill=class), position='dodge') + ggtitle("Generated Distribution of Panel Use") + xlab("Use of info panel during session") + ylab("Frequency")
ggplot(real.all) + geom_density(aes(x = infoPanelWidth, color=class, group=class, fill=class)) + ggtitle("Generated Distribution of Panel Widths") + xlab("Panel width (%)") + ylab("Density") + scale_x_continuous(limits = c(0, 100))
real.dat <- generateTheoreticalData.simple(50, "Real", "./../../models/real.model.csv")
real.all <- rbind(all, real.dat)
ggplot(real.all) + geom_bar(aes(x = infoPanel, color=class, group=class, fill=class), position='dodge') + ggtitle("Generated Distribution of Panel Use") + xlab("Use of info panel during session") + ylab("Frequency")
ggplot(real.all) + geom_density(aes(x = infoPanelWidth, color=class, group=class, fill=class)) + ggtitle("Generated Distribution of Panel Widths") + xlab("Panel width (%)") + ylab("Density") + scale_x_continuous(limits = c(0, 100))
real.dat <- generateTheoreticalData.simple(25, "Real", "./../../models/real.model.csv")
real.all <- rbind(all, real.dat)
ggplot(real.all) + geom_bar(aes(x = infoPanel, color=class, group=class, fill=class), position='dodge') + ggtitle("Generated Distribution of Panel Use") + xlab("Use of info panel during session") + ylab("Frequency")
ggplot(real.all) + geom_density(aes(x = infoPanelWidth, color=class, group=class, fill=class)) + ggtitle("Generated Distribution of Panel Widths") + xlab("Panel width (%)") + ylab("Density") + scale_x_continuous(limits = c(0, 100))
real.dat <- generateTheoreticalData.simple(100, "Real", "./../../models/real.model.csv")
real.all <- rbind(all, real.dat)
ggplot(real.all) + geom_bar(aes(x = infoPanel, color=class, group=class, fill=class), position='dodge') + ggtitle("Generated Distribution of Panel Use") + xlab("Use of info panel during session") + ylab("Frequency")
ggplot(real.all) + geom_density(aes(x = infoPanelWidth, color=class, group=class, fill=class)) + ggtitle("Generated Distribution of Panel Widths") + xlab("Panel width (%)") + ylab("Density") + scale_x_continuous(limits = c(0, 100))
dat.noclass <- real.all[, -3]
k = 2
clusters <- fanny(dat.noclass, k, memb.exp = 1.1)
fviz_cluster(clusters)
plot(clusters, which=1, main=paste("Cluster membership, k=", k))
mem <- data.frame(clusters$membership)
mem$class <- as.factor(dat$class)
names(mem) <- c("C1", "C2", "class")
cit
ggplot(mem, aes(x = C1, y=C2, color=C1)) + geom_point(size=3) + ggtitle("Percent cluster membership") + xlab("Probabiity of Research ->") + ylab("Probabiity of Novice ->") + scale_color_continuous(low='blue', high='red', "Modeled membership\npercentage of research class")
fviz_cluster(clusters)
dat.noclass <- real.all[, -3]
k = 3
clusters <- fanny(dat.noclass, k, memb.exp = 1.1)
fviz_cluster(clusters)
clusters <- fanny(dat.noclass, k, memb.exp = 2)
fviz_cluster(clusters)
head(mem)
mem$class <- as.factor(real.all$class)
names(mem) <- c("C1", "C2", "class")
ggplot(mem, aes(x = C1, y=C2, color=C1)) + geom_point(size=3) + ggtitle("Percent cluster membership") + xlab("Probabiity of Research ->") + ylab("Probabiity of Novice ->") + scale_color_continuous(low='blue', high='red', "Modeled membership\npercentage of research class")
ggplot(mem, aes(x = C1, y=C2, color=C1, shape=class)) + geom_point(size=3) + ggtitle("Percent cluster membership") + xlab("Probabiity of Research ->") + ylab("Probabiity of Novice ->") + scale_color_continuous(low='blue', high='red', "Modeled membership\npercentage of research class") +scale_shape("Actual Class")
fviz_screeplot(clusters)
fviz_silhouette(cluster)
fviz_silhouette(clusters)
k = 1
clusters <- fanny(dat.noclass, k, memb.exp = 2)
fviz_silhouette(clusters)
k = 2
clusters <- fanny(dat.noclass, k, memb.exp = 2)
fviz_silhouette(clusters)
k = 3
clusters <- fanny(dat.noclass, k, memb.exp = 2)
fviz_silhouette(clusters)
k = 4
clusters <- fanny(dat.noclass, k, memb.exp = 2)
fviz_silhouette(clusters)
real.dat <- generateTheoreticalData.simple(100, "Real", "./../../models/real.model.csv")
real.all <- rbind(all, real.dat)
ggplot(real.all) + geom_bar(aes(x = infoPanel, color=class, group=class, fill=class), position='dodge') + ggtitle("Generated Distribution of Panel Use") + xlab("Use of info panel during session") + ylab("Frequency")
ggplot(real.all) + geom_density(aes(x = infoPanelWidth, color=class, group=class, fill=class)) + ggtitle("Generated Distribution of Panel Widths") + xlab("Panel width (%)") + ylab("Density") + scale_x_continuous(limits = c(0, 100))
dat.noclass <- real.all[, -3]
k = 2
clusters <- fanny(dat.noclass, k, memb.exp = 2)
k = 1
clusters <- fanny(dat.noclass, k, memb.exp = 2)
fviz_silhouette(clusters)
k = 2
clusters <- fanny(dat.noclass, k, memb.exp = 2)
fviz_silhouette(clusters)
k = 3
clusters <- fanny(dat.noclass, k, memb.exp = 2)
fviz_silhouette(clusters)
k = 4
clusters <- fanny(dat.noclass, k, memb.exp = 2)
fviz_silhouette(clusters)
fanny
citation(fclust)
citation('fclust')
citation('cluster')
dat.noclass <- real.all[, -3]
k = 2
clusters <- fanny(dat.noclass, k, memb.exp = 1.1)
fviz_cluster(clusters)
clusters <- fanny(dat.noclass, k, memb.exp = 3)
dat.noclass <- real.all[, -3]
k = 3
clusters <- fanny(dat.noclass, k, memb.exp = 3)
fviz_cluster(clusters)
clusters$membership
plot3D::contour3D(x = clusters$membership[, 1], x = clusters$membership[, 2], x = clusters$membership[, 3])
plot3D::contour3D(x = clusters$membership[, 1], y = clusters$membership[, 2], z = clusters$membership[, 3])
q <- clusters$membership
q
q <- data.frame(q)
q
head(q)
plot(q$X1 ~ q$X2)
contour()
contour(q$X1, q$X2, q$X3)
plot(q$X1 ~ q$X2, col=q$X3)
plot(q$X1 ~ q$X2, color=q$X3)
ggplot(q) + geom_point(aes(x = X1, y=X2, col=X3))
warnings()
ggplot(q) + geom_point(aes(x = X1, y=X2, size=X3))
ggplot(q) + geom_contour(aes(x = X1, y=X2))
ggplot(q) + geom_contour(aes(x = X1, y=X2, z=X3))
q <- data.frame(clusters$membership)
ggplot(q) + geom_contour(aes(x = X1, y=X2, z=X3))
dim(q)
faithfuld
tibble
q <- data.frame(clusters$membership)
ggplot(q, aes(X1, X2)) + geom_density_2d()
q <- data.frame(clusters$membership)
ggplot(q, aes(X1, X2)) + geom_density_2d(aes(fill=X3))
q <- data.frame(clusters$membership)
ggplot(q, aes(X1, X2)) + geom_density_2d(aes(col=X3))
q <- data.frame(clusters$membership)
ggplot(q, aes(X1, X2)) + geom_density_2d(aes(colour=X3))
ggplot(q, aes(X1, X2)) + geom_density_2d() + geom_raster(aes(fill = X3))
q$X3
ggplot(q, aes(X1, X2, X3)) + geom_density_2d()
ggplot(q, aes(X1, X2, X3)) + geom_density_2d(aes(col=X3))
ggplot(q, aes(X1, X2, X3)) + geom_density_2d(aes(z=X3))
ggplot(q, aes(X1, X2, X3)) + geom_contour(aes(z=X3))
ggplot(q, aes(X1, X2, X3)) + geom_contour(aes())
ggplot(q, aes(X1, X2)) + geom_contour()
ggplot(q, aes(X1, X2)) + geom_density_2d()
q$class <- real.dat$class
ggplot(q, aes(X1, X2)) + geom_density_2d() + geom_point(aes(shape=class))
q$class <- all.real$class
real.all
q$class <- real.all$class
ggplot(q, aes(X1, X2)) + geom_density_2d() + geom_point(aes(shape=class))
ggplot(q, aes(X1, X2)) + geom_density_2d(aes(fill=X2)) + geom_point(aes(shape=class))
ggplot(q, aes(X1, X2)) + stat_contour(aes(colour=..level..)) + geom_point(aes(shape=class))
ggplot(q, aes(X1, X2)) + stat_contour(aes(colour=..level..)) + geom_point(aes(shape=class, col=class))
dat.noclass <- real.all[, -3]
k = 2
clusters <- fanny(dat.noclass, k, memb.exp = 3)
q <- data.frame(clusters$membership)
q$class <- real.all$class
ggplot(q, aes(X1, X2)) + stat_contour(aes(colour=..level..)) + geom_point(aes(shape=class, col=class))
dat.noclass <- real.all[, -3]
k = 2
clusters <- fanny(dat.noclass, k, memb.exp = 3)
q <- data.frame(clusters$membership)
q$class <- real.all$class
ggplot(q, aes(X1, X2)) + stat_contour() + geom_point(aes(shape=class, col=class))
dat.noclass <- real.all[, -3]
k = 2
clusters <- fanny(dat.noclass, k, memb.exp = 3)
q <- data.frame(clusters$membership)
q$class <- real.all$class
ggplot(q, aes(X1, X2)) + geom_density_2d()
ggplot(q, aes(X1, X2)) + geom_density_2d(aes(colour=..level..))
ggplot(q, aes(X1, X2)) + geom_density_2d(aes(colour=..level..)) + scale_colour_continuous(low='red', high='cyan')
dat.noclass <- real.all[, -3]
k = 2
clusters <- fanny(dat.noclass, k, memb.exp = 3)
q <- data.frame(clusters$membership)
q$class <- real.all$class
ggplot(q, aes(X1, X2)) + geom_density_2d(aes(colour=..level..)) + scale_colour_continuous(low='red', high='cyan') + geom_point(aes(x = X1, y=X2, shape=class, color=class)) + scale_shape('Actual Class')
dat.noclass <- real.all[, -3]
k = 2
clusters <- fanny(dat.noclass, k, memb.exp = 3)
q <- data.frame(clusters$membership)
q$class <- real.all$class
ggplot(q, aes(X1, X2)) + geom_density_2d(aes(colour=..level..)) + scale_colour_continuous(low='red', high='cyan') + geom_point(aes(x = X1, y=X2, shape=class)) + scale_shape('Actual Class')
dat.noclass <- real.all[, -3]
k = 2
clusters <- fanny(dat.noclass, k, memb.exp = 3)
q <- data.frame(clusters$membership)
q$class <- real.all$class
ggplot(q, aes(X1, X2)) + geom_density_2d(aes(colour=..level..)) + scale_colour_continuous(low='red', high='cyan', guide=F) + geom_point(aes(x = X1, y=X2, shape=class)) + scale_shape('Actual Class')
dat.noclass <- real.all[, -3]
k = 2
clusters <- fanny(dat.noclass, k, memb.exp = 3)
q <- data.frame(clusters$membership)
q$class <- real.all$class
ggplot(q, aes(X1, X2)) + geom_density_2d(aes(colour=..level..)) + scale_colour_continuous(low='red', high='cyan', guide=F) + geom_point(aes(x = X1, y=X2, shape=class, col=class)) + scale_shape('Actual Class')
dat.noclass <- real.all[, -3]
k = 2
clusters <- fanny(dat.noclass, k, memb.exp = 3)
q <- data.frame(clusters$membership)
q$class <- real.all$class
ggplot(q, aes(X1, X2)) + geom_density_2d(aes(colour=..level..)) + scale_colour_continuous(low='red', high='cyan', guide=F) + geom_point(aes(x = X1, y=X2, shape=class, col=class)) + scale_shape('Actual Class') + scale_color_discrete('Acutal Class)
dat.noclass <- real.all[, -3]
k = 2
clusters <- fanny(dat.noclass, k, memb.exp = 3)
q <- data.frame(clusters$membership)
q$class <- real.all$class
ggplot(q, aes(X1, X2)) + geom_density_2d(aes(colour=..level..)) + scale_colour_continuous(low='red', high='cyan', guide=F) + geom_point(aes(x = X1, y=X2, shape=class, col=class)) + scale_shape('Actual Class') + scale_color_discrete('Acutal Class')
dat.noclass <- real.all[, -3]
k = 2
clusters <- fanny(dat.noclass, k, memb.exp = 3)
q <- data.frame(clusters$membership)
q$class <- real.all$class
ggplot(q, aes(X1, X2)) + geom_density_2d(aes(fill=..level..)) + scale_fill_continuous(low='red', high='cyan', guide=F) + geom_point(aes(x = X1, y=X2, shape=class, col=class)) + scale_shape('Actual Class') + scale_color_discrete('Acutal Class')
dat.noclass <- real.all[, -3]
k = 2
clusters <- fanny(dat.noclass, k, memb.exp = 3)
q <- data.frame(clusters$membership)
q$class <- real.all$class
ggplot(q, aes(X1, X2)) + geom_density_2d(aes(alpha=..level..), ) + scale_fill_continuous(low='red', high='cyan', guide=F) + geom_point(aes(x = X1, y=X2, shape=class, col=class)) + scale_shape('Actual Class') + scale_color_discrete('Acutal Class')
dat.noclass <- real.all[, -3]
k = 2
clusters <- fanny(dat.noclass, k, memb.exp = 3)
q <- data.frame(clusters$membership)
q$class <- real.all$class
ggplot(q, aes(X1, X2)) + geom_density_2d(aes(alpha=..level..), binwidth=0.01) + scale_fill_continuous(low='red', high='cyan', guide=F) + geom_point(aes(x = X1, y=X2, shape=class, col=class)) + scale_shape('Actual Class') + scale_color_discrete('Acutal Class')
x <- fviz_silhouette(clusters)
x
x$data
head(x$data)
mean(x$data$sil_width)
r <- numeric()
k = 1
clusters <- fanny(dat.noclass, k, memb.exp = 2)
x <- fviz_silhouette(clusters)
avg <- mean(x$data$sil_width)
r[1] <- avg
k = 2
clusters <- fanny(dat.noclass, k, memb.exp = 2)
x <- fviz_silhouette(clusters)
avg <- mean(x$data$sil_width)
r[2] <- avg
k = 3
clusters <- fanny(dat.noclass, k, memb.exp = 2)
x <- fviz_silhouette(clusters)
avg <- mean(x$data$sil_width)
r[3] <- avg
k = 4
clusters <- fanny(dat.noclass, k, memb.exp = 2)
x <- fviz_silhouette(clusters)
avg <- mean(x$data$sil_width)
r[4] <- avg
k = 5
clusters <- fanny(dat.noclass, k, memb.exp = 2)
x <- fviz_silhouette(clusters)
avg <- mean(x$data$sil_width)
r[5] <- avg
k = 6
clusters <- fanny(dat.noclass, k, memb.exp = 2)
x <- fviz_silhouette(clusters)
avg <- mean(x$data$sil_width)
r[6] <- avg
k = 7
clusters <- fanny(dat.noclass, k, memb.exp = 2)
x <- fviz_silhouette(clusters)
avg <- mean(x$data$sil_width)
r[7] <- avg
k = 8
clusters <- fanny(dat.noclass, k, memb.exp = 2)
x <- fviz_silhouette(clusters)
avg <- mean(x$data$sil_width)
r[8] <- avg
plot(r)
max(r)
r[1] <- NULL
r[1] <- 0
max(r)
plot(r)
r[1] <- NaN
plot(r, type='b')
plot(r, type='b', xlab = "Number of Clusters", ylab="Average silhouette statistic", main="Silhouette analysis")
calcPosteriorForProportion
?learnBayes
calcPosteriorForProportion(25, 100, 500, 100)
calcPosteriorForProportion(25, 100, 1, 1)
calcPosteriorForProportion(25, 100, 5, 5)
n = 10
sum(research.dat$infoPanel)
length(research.dat$infoPanel)
p <- sum(research.dat$infoPanel) / length(research.dat$infoPanel)
p
m <- 500
alpha
n <- 500
a <- p * n
a
b <- 500* ( 1- p)
b
calcPosteriorForProportion(50, 100, a, b)
N = 50
novice.dat <- generateTheoreticalData.simple(N, "Novice", "./../../models/novice.model.csv")
p <- sum(novice.dat$infoPanel) / length(novice.dat$infoPanel)
N = 50
novice.dat <- generateTheoreticalData.simple(N, "Novice", "./../../models/novice.model.csv")
p <- sum(novice.dat$infoPanel) / length(novice.dat$infoPanel)
nu <- N
a <- p * nu
b <- nu*(1-p)
a
b
N = 50
novice.dat <- generateTheoreticalData.simple(N, "Novice", "./../../models/novice.model.csv")
p <- sum(novice.dat$infoPanel) / length(novice.dat$infoPanel)
nu <- N
a <- p * nu
b <- nu*(1-p)
successes <- 50
trials <- 100
calcPosteriorForProportion(successes, trials, a, b)
a
b
N = 50
novice.dat <- generateTheoreticalData.simple(N, "Novice", "./../../models/novice.model.csv")
p <- sum(research.dat$infoPanel) / length(research.dat$infoPanel)
nu <- N
a <- p * nu
b <- nu*(1-p)
successes <- 50
trials <- 100
calcPosteriorForProportion(successes, trials, a, b)
real.success <- sum(real.dat$infoPanel)
real.trials <- length(real.dat$infoPanel)
N = 50
novice.dat <- generateTheoreticalData.simple(N, "Novice", "./../../models/novice.model.csv")
p <- sum(research.dat$infoPanel) / length(research.dat$infoPanel)
nu <- N
a <- p * nu
b <- nu*(1-p)
successes <- 50
trials <- 100
real.success <- sum(real.dat$infoPanel)
real.trials <- length(real.dat$infoPanel)
# real.p <- sum(real.dat$infoPanel) / length(real.dat$infoPanel)
# real.nu <- length(real.dat$infoPanel)
# #
# real.a <- real.p * real.nu
# real.b <- real.nu*(1-real.p)
calcPosteriorForProportion(real.success, real.trials, a, b)
a
b
real.success
real.trials
post <- calcPosteriorForProportion(real.success, real.trials, a, b)
mean(post)
post
plot(post)
median(post)
library(LearnBayes)
findBeta <- function(quantile1,quantile2,quantile3)
{
# find the quantiles specified by quantile1 and quantile2 and quantile3
quantile1_p <- quantile1[[1]]; quantile1_q <- quantile1[[2]]
quantile2_p <- quantile2[[1]]; quantile2_q <- quantile2[[2]]
quantile3_p <- quantile3[[1]]; quantile3_q <- quantile3[[2]]
# find the beta prior using quantile1 and quantile2
priorA <- beta.select(quantile1,quantile2)
priorA_a <- priorA[1]; priorA_b <- priorA[2]
# find the beta prior using quantile1 and quantile3
priorB <- beta.select(quantile1,quantile3)
priorB_a <- priorB[1]; priorB_b <- priorB[2]
# find the best possible beta prior
diff_a <- abs(priorA_a - priorB_a); diff_b <- abs(priorB_b - priorB_b)
step_a <- diff_a / 100; step_b <- diff_b / 100
if (priorA_a < priorB_a) { start_a <- priorA_a; end_a <- priorB_a }
else                     { start_a <- priorB_a; end_a <- priorA_a }
if (priorA_b < priorB_b) { start_b <- priorA_b; end_b <- priorB_b }
else                     { start_b <- priorB_b; end_b <- priorA_b }
steps_a <- seq(from=start_a, to=end_a, length.out=1000)
steps_b <- seq(from=start_b, to=end_b, length.out=1000)
max_error <- 10000000000000000000
best_a <- 0; best_b <- 0
for (a in steps_a)
{
for (b in steps_b)
{
# priorC is beta(a,b)
# find the quantile1_q, quantile2_q, quantile3_q quantiles of priorC:
priorC_q1 <- qbeta(c(quantile1_p), a, b)
priorC_q2 <- qbeta(c(quantile2_p), a, b)
priorC_q3 <- qbeta(c(quantile3_p), a, b)
priorC_error <- abs(priorC_q1-quantile1_q) +
abs(priorC_q2-quantile2_q) +
abs(priorC_q3-quantile3_q)
if (priorC_error < max_error)
{
max_error <- priorC_error; best_a <- a; best_b <- b
}
}
}
print(paste("The best beta prior has a=",best_a,"b=",best_b))
return(list(a=best_a, b=best_b))
}
quantile1 <- list(p=0.5, x=0.85)    # we believe the median of the prior is 0.85
quantile2 <- list(p=0.75,x=0.95) # we believe the 99.999th percentile of the prior is 0.95
quantile3 <- list(p=0.25,x=0.60) # we believe the 0.001st percentile of the prior is 0.60
# findBeta(quantile1,quantile2,quantile3)
calcPosteriorForProportion <- function(successes, total, a, b)
{
# Adapted from triplot() in the LearnBayes package
# Plot the prior, likelihood and posterior:
likelihood_a = successes + 1; likelihood_b = total - successes + 1
posterior_a = a + successes;  posterior_b = b + total - successes
theta = seq(0.005, 0.995, length = 500)
prior = dbeta(theta, a, b)
likelihood = dbeta(theta, likelihood_a, likelihood_b)
posterior  = dbeta(theta, posterior_a, posterior_b)
m = max(c(prior, likelihood, posterior))
plot(theta, posterior, type = "l", ylab = "Density", lty = 2, lwd = 3,
main = paste("beta(", a, ",", b, ") prior, B(", total, ",", successes, ") data,",
"beta(", posterior_a, ",", posterior_b, ") posterior"), ylim = c(0, m), col = "red")
lines(theta, likelihood, lty = 1, lwd = 3, col = "blue")
lines(theta, prior, lty = 3, lwd = 3, col = "green")
legend(x=0.8,y=m, c("Prior", "Likelihood", "Posterior"), lty = c(3, 1, 2),
lwd = c(3, 3, 3), col = c("green", "blue", "red"))
# Print out summary statistics for the prior, likelihood and posterior:
calcBetaMode <- function(aa, bb) { BetaMode <- (aa - 1)/(aa + bb - 2); return(BetaMode); }
calcBetaMean <- function(aa, bb) { BetaMean <- (aa)/(aa + bb); return(BetaMean); }
calcBetaSd   <- function(aa, bb) { BetaSd <- sqrt((aa * bb)/(((aa + bb)^2) * (aa + bb + 1))); return(BetaSd); }
prior_mode      <- calcBetaMode(a, b)
likelihood_mode <- calcBetaMode(likelihood_a, likelihood_b)
posterior_mode  <- calcBetaMode(posterior_a, posterior_b)
prior_mean      <- calcBetaMean(a, b)
likelihood_mean <- calcBetaMean(likelihood_a, likelihood_b)
posterior_mean  <- calcBetaMean(posterior_a, posterior_b)
prior_sd        <- calcBetaSd(a, b)
likelihood_sd   <- calcBetaSd(likelihood_a, likelihood_b)
posterior_sd    <- calcBetaSd(posterior_a, posterior_b)
print(paste("mode for prior=",prior_mode,", for likelihood=",likelihood_mode,", for posterior=",posterior_mode))
print(paste("mean for prior=",prior_mean,", for likelihood=",likelihood_mean,", for posterior=",posterior_mean))
print(paste("sd for prior=",prior_sd,", for likelihood=",likelihood_sd,", for posterior=",posterior_sd))
print(paste("Posterior A: ", posterior_a))
print(paste("Posterior B: ", posterior_b))
return(posterior)
}
p <- calcPosteriorForProportion(45, 50, 52.22, 9.52)
makeQuantiles <- function(dist, quantiles=c(0.25, 0.5, 0.75)){
x1 <- quantile(dist, quantiles[1])[[1]]
q1 <- list(p=quantiles[[1]], x=x1)
x2 <- quantile(dist, quantiles[2])[[1]]
q2 <- list(p=quantiles[[2]], x=x2)
x3 <- quantile(dist, quantiles[3])[[1]]
q3 <- list(p=quantiles[[3]], x=x3)
return(list(q1, q2, q3))
}
q <- makeQuantiles(p)
#
d <- findBeta(q[[1]], q[[2]], q[[3]])
p <- calcPosteriorForProportion(50, 100, 10, 100)
x <- beta.select(list(p=0.1, x=quantile(p, 0.1)), list(p=0.5, x=quantile(p, 0.5)))
p <- calcPosteriorForProportion(1, 10, x[[1]], x[[2]])
N = 50
novice.dat <- generateTheoreticalData.simple(N, "Novice", "./../../models/novice.model.csv")
p <- sum(research.dat$infoPanel) / length(research.dat$infoPanel)
nu <- N
a <- p * nu
b <- nu*(1-p)
successes <- 50
trials <- 100
real.success <- sum(real.dat$infoPanel)
real.trials <- length(real.dat$infoPanel)
# real.p <- sum(real.dat$infoPanel) / length(real.dat$infoPanel)
# real.nu <- length(real.dat$infoPanel)
# #
# real.a <- real.p * real.nu
# real.b <- real.nu*(1-real.p)
post <- calcPosteriorForProportion(real.success, real.trials, a, b)
N = 50
novice.dat <- generateTheoreticalData.simple(N, "Novice", "./../../models/novice.model.csv")
p <- sum(research.dat$infoPanel) / length(research.dat$infoPanel)
nu <- N
a <- p * nu
b <- nu*(1-p)
successes <- 50
trials <- 100
real.success <- sum(real.dat$infoPanel)
real.trials <- length(real.dat$infoPanel)
# real.p <- sum(real.dat$infoPanel) / length(real.dat$infoPanel)
# real.nu <- length(real.dat$infoPanel)
# #
# real.a <- real.p * real.nu
# real.b <- real.nu*(1-real.p)
post <- calcPosteriorForProportion(real.success, real.trials, a, b)
newA <- 122
newB <- 28
newSuccess <- 50
newTrials <- 60
post <- calcPosteriorForProportion(newSuccess, newTrials, newA, newB)
